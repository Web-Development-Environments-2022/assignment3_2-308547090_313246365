openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed

  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /alive:
    get:
      tags:
        - Server Communication Check
      summary: Checking if the server is on air. 
      responses:
        "200":
          description: "I'm alive"

  /users/myRecipes:
    get:
      tags:
      - Users
      summary: Returns preview of all the recipes that maded by the user
      description: Returns preview of all the recipes that maded by the user
      responses:
        "200":
          description: data about the user's  recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/list_of_preview'
        "201":
          description: User didn't upload any recipe 
        "401":
          description: user is not authorized  

  
  /users/familyRecipes:
    get:
      tags:
      - Users
      summary: Returns contan of all the recipes that belongs to the user's family
      description: Returns contan of all the recipes that belongs to the user's family
      responses:
        "200":
          description: data about the user's  family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/list_of_family'
        "201":
          description: The user has no family recipes
        "401":
          description: user is not authorized  
 
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []

  /users/recipe:
    post:
      tags:
      - Users
      summary: upload a recipe to the website 
      description: upload a recipe to the website 
      requestBody:
        description: the new recipe details  to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRecipe'
        required: true
      responses:
        "201":
          description: the recipe was created successfully

  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return full details on recipe by his ID
      description: Return full details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "500":
          description: Request failed with status code 404 (if recipe id is not exists in spoonacular) 

  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Returns 3 random recipes in preview format 
      description: Returns 3 random recipes in preview format 
      responses:
        "200":
          description: three random recipes in preview format 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_of_random'

  /recipes/searchRecipes/{query,titleMatch,number,cuisine,diet,intolerances}:
    get:
      tags:
      - Recipes
      summary: search recipes according to content of recipe, title, cuisine , diet and intolerance parameters
      description: Return full details on recipe by his ID
      parameters:
      - name: query
        in: path
        description: text to search n content  
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: pasta
      - name: titleMatch
        in: path
        description: text to search in recipe title 
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: pasta
      
      - name: number
        in: path
        description: number of results to retrive- 5/10/15 
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 5
      
      - name: cuisine
        in: path
        description: the cuisine we want to filter by the results
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: italian
        
      - name: diet
        in: path
        description: the diet we want to filter by the results
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: vegeterian
      
      - name: intolerances
        in: path
        description: the intolerances whe want to filter by the results
        required: false
        style: simple
        explode: false
        schema:
          type: string
          example: soy
        
      responses:
        "200":
          description: recipes that retrived from the search  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list_of_search'
        "204":
          description: No results to the search 



  



components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com



        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        wasWatched:
          type: boolean
          description: indication if the recipe was watched by the user or not, only for users that logged in otherwise false 
          example: false
        isFavourite:
          type: boolean
          description: indication if the recipe is in the favourite of the user's profile, only if he logs in otherwise false
          example: false
    UploadRecipe:
      type: object
      properties:
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        ingredients:
          type: string 
          description: the ingredients of the recipe in a dictionary withe amount as value 
          example: "{milk: 1 cup, eggs: 3}"
        instructions:
          type: string 
          description: the instructions of the recipe in a dictionary of step number as key 
          example: "{1: cut all the ingredients 2: mix all together}"
        servings:
          type: integer 
          description: to how many people can eat the dish  
          example: 4  
    Recipe:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        user_id:
          type: integer
          description: user identifier
          example: 1
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        wasWatched:
          type: boolean
          description: indication if the recipe was watched by the user or not, only for users that logged in otherwise false 
          example: false
        isFavourite:
          type: boolean
          description: indication if the recipe is in the favourite of the user's profile, only if he logs in otherwise false
          example: false
        ingredients:
          type: string 
          description: the ingredients of the recipe in a dictionary withe amount as value 
          example: "{milk: 1 cup, eggs: 3}"
        instructions:
          type: string 
          description: the instructions of the recipe in a dictionary of step number as key 
          example: "{1: cut all the ingredients 2: mix all together}"
        servings:
          type: integer 
          description: to how many people can eat the dish  
          example: 4
    
    FamilyRecipe:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        user_id:
          type: integer
          description: user identifier
          example: 1
        creator:
          type: string
          description: the name of the person who created the recipe 
          example: "Grandmother Shoshi"
        eating_time:
          type: string
          description: the occaison people used to make the recipe  
          example: "Rosh Hashana Holiday"
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        wasWatched:
          type: boolean
          description: indication if the recipe was watched by the user or not, only for users that logged in otherwise false 
          example: false
        isFavourite:
          type: boolean
          description: indication if the recipe is in the favourite of the user's profile, only if he logs in otherwise false
          example: false
        ingredients:
          type: string 
          description: the ingredients of the recipe in a dictionary withe amount as value 
          example: "{milk: 1 cup, eggs: 3}"
        instructions:
          type: string 
          description: the instructions of the recipe in a dictionary of step number as key 
          example: "{1: cut all the ingredients 2: mix all together}"
        servings:
          type: integer 
          description: to how many people can eat the dish  
          example: 4
    
    list_of_random:
      type: array 
      description:  array of preview items
      minItems: 3
      maxItems: 3
      items: 
        $ref: '#/components/schemas/RecipePreview'


    list_of_search:
      type: array 
      description:  array of Recipe items
      minItems: 5
      maxItems: 15
      items: 
        $ref: '#/components/schemas/Recipe'

    
    list_of_family:
      type: array 
      description:  array of FamilyRecipe items 
      items:
        $ref: '#/components/schemas/FamilyRecipe'
    
    list_of_preview:
      type: array 
      description:  array of RecipePreview items   
      items: 
          $ref: '#/components/schemas/RecipePreview'



  
